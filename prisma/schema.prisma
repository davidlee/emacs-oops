import { StatusNames, EntryTypes, Priority } from '../src/entry.js'
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "foreignKeys"
  extensions = [citext, pgcrypto]
  // extensions
}

model Tag {
  //* required by Bark *//
  id       Int    @id @default(autoincrement())
  path     String @unique
  depth    Int
  numchild Int    @default(0)
  
  //* relation's own fields *//
  name     String  @db.Citext @unique
  group    String  @db.Citext @default("default")

  entries  Entry[]

  @@index([path])
  @@index([name, group])
}

model Node {
  //* required by Bark *//
  id       Int    @id @default(autoincrement())
  path     String @unique
  depth    Int
  numchild Int    @default(0)

  //* relation's own fields *//
  name     String  @unique
  entry    Entry?  @relation("EntryNode")
}

enum Status {
  Capture
  Draft
  Rework
  Clarify
  Incubate
  Backlog
  Icebox
  
  Ready
  Next
  Started
  Check
  Done
  Reflect
  
  Stalled
  Aborted
  Archive
  Deleted
}

enum EntryType {
  Transient
  Note
  // Domain  
  Area
  Objective
  Project
  Task
  // Plan
  // Activity
}

// https://github.com/geckoboard/pgulid/blob/master/pgulid.sql
// https://github.com/fboulnois/pg_uuidv7

model Entry {
  // id         String  @id @default(dbgenerated("generate_ulid()"))
  id       Int    @id @default(autoincrement())
  entryType  EntryType @default(Transient) 
  
  node       Node?   @relation("EntryNode", fields: [nodeId], references: [id])
  nodeId     Int?    @unique
  path       String? @unique   
  
  // parents    Entry?  @relation("Parent", fields: [parentId], references: [id])
  // children   Entry[] @relation("Parent")
  // parentId   Int?
  depends    Entry[] @relation("Depends")
  dependents Entry[] @relation("Depends")
  tags       Tag[]   
  updates    Update[] @relation("EntryUpdates")
  reviews    Review[] @relation("EntryReviews")

  meta       Json?
  position   Int     @default(1)
  status     Status  @default(Draft)
  text       String
  url        String?
  filePath   String?
    
  priority   Int     @default(0)
  urgency    Float   @default(1.0)

  due        DateTime?
  end        DateTime?
  scheduled  DateTime?
  until      DateTime?
  wait       DateTime?
  start      DateTime?
  
  recurConfig      Json? // mutually exclusive with repeat
  repeatConfig     Json? // ...  
  reviewConfig     Json? // for SRI / incr. writing

  jobAt      DateTime? // cron / workers need to process recurrence / review

  created    DateTime  @default(now())
  modified   DateTime  @default(now())
  deleted    DateTime? 
   
  @@index([path])
  @@index([entryType])
  @@index([status])
}  

model Update {
  id         Int    @id @default(autoincrement())
  created    DateTime  @default(now())
  changes    Json
  entry      Entry   @relation("EntryUpdates", fields: [entryId], references: [id])
  entryId    Int 
}

model Review {
  id         Int    @id @default(autoincrement())
  created    DateTime  @default(now())
  // changes    Json
  entry      Entry   @relation("EntryReviews", fields: [entryId], references: [id])
  entryId    Int 
}